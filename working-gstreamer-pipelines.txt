H264 over UDP
Send
gst-launch-1.0 -v videotestsrc ! x264enc tune=zerolatency ! rtph264pay ! udpsink host=127.0.0.1 port=25570

Receive
gst-launch-1.0 -v udpsrc port=25570 caps = "application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264, payload=(int)96" ! queue ! rtph264depay ! decodebin ! queue ! videoconvert ! autovideosink

H264 over TCP without packeting

Send (Remote)
gst-launch-1.0 -v videotestsrc ! timeoverlay ! x264enc tune=zerolatency ! tcpclientsink host=127.0.0.1 port=25570

Receiver (if host)
gst-launch-1.0 -v tcpserversrc host=127.0.0.1 port=25570 ! h264parse ! decodebin ! videoconvert ! autovideosink


VP8 over TCP with matroska
Send (Remote)
gst-launch-1.0 -v videotestsrc ! timeoverlay ! vp8enc ! matroskamux ! tcpclientsink host=127.0.0.1 port=25571

Receiver (Server)
gst-launch-1.0 -v tcpserversrc host=127.0.0.1 port=25571 ! matroskademux ! decodebin ! videoconvert ! autovideosink

H264 over RTMP (Server on Nimble)
Sender
gst-launch-1.0 -v videotestsrc ! timeoverlay ! x264enc tune=zerolatency ! flvmux ! rtmpsink location="rtmp://127.0.0.1:25570/live/obs live=1"

Receiver
gst-launch-1.0 -v rtmpsrc location=rtmp://127.0.0.1:25570/live/obs ! decodebin ! videoconvert ! autovideosink

HLS
Send over FFMPEG, POST to remote http server (accepts post requests and saves files)
ffmpeg -re -i lol.mp4 -f hls -method POST http://127.0.0.1:5000/hls/out.m3u8

Send over Gstreamer
gst-launch-1.0 videotestsrc is-live=true ! x264enc ! mpegtsmux ! hlssink max-files=5 target-duration=2 playlist-location="B:/python/gstreamer-ninja/tmp/hls/playlist.m3u8" location=B:/python/gstreamer-ninja/tmp/hls/segment%05d.ts

Receive (alternativ mit local file source)
gst-launch-1.0 souphttpsrc location=http://127.0.0.1:5000/hls/out.m3u8 ! hlsdemux ! decodebin ! videoconvert ! autovideosink

#doesnt work because playlist file gets restricted
gst-launch-1.0 filesrc location=out.m3u8 ! hlsdemux ! decodebin ! autovideosink

DASH
Send
gst-launch-1.0 videotestsrc is-live=true ! x264enc ! dashsink.video_0 dashsink name=dashsink max-files=5 target-duration=2 mpd-root-path=B:/python/gstreamer-ninja/http-server/dash/

Receive
gst-launch-1.0 souphttpsrc location=http://127.0.0.1:5000/dash/dash.mpd ! dashdemux ! decodebin ! videoconvert ! autovideosink

VP8 Realtime encoding
gst-launch-1.0 -v filesrc location="E:/2020-10-17_ChaosCity5/Entrance Videos/WINNING CUT/SenzaVolto_2020_WINNING_CUT.avi" ! decodebin ! queue ! videoconvert ! queue ! vp8enc end-usage=vbr threads=5 max-quantizer=63 min-quantizer=10 deadline=1 ! decodebin ! queue ! videoconvert ! autovideosink

VP9 Realtime encoding
gst-launch-1.0 -v filesrc location="E:/2020-10-17_ChaosCity5/Entrance Videos/WINNING CUT/SenzaVolto_2020_WINNING_CUT.avi" ! decodebin ! queue ! videoconvert ! queue ! vp9enc deadline=1 threads=5 max-quantizer=63 min-quantizer=30 end-usage=vbr cpu-used=12 target-bitrate=2500000 ! decodebin ! queue ! autovideosink

H265 over TCP, no lags
gst-launch-1.0 -v filesrc location="E:/2020-10-17_ChaosCity5/Entrance Videos/WINNING CUT/SenzaVolto_2020_WINNING_CUT.avi" ! decodebin ! queue ! videoconvert ! queue ! x265enc key-int-max=30 tune=zerolatency speed-preset=ultrafast ! "video/x-h265, profile=main" ! h265parse ! matroskamux streamable=true ! queue ! tcpclientsink host=127.0.0.1 port=25571

Parsing Mp4 file correctly for rtp (config-interval -1 use keyframe information)
gst-launch-1.0 -v filesrc location=B:/python/sample_files_custom/Custom_1.mp4 ! qtdemux ! h264parse config-interval=-1 ! rtph264pay ! udpsink host=127.0.0.1 port=25571

3sec Memory Buffer (Delay) of H264 stream
gst-launch-1.0 -v videotestsrc ! x264enc ! avdec_h264 ! videoconvert ! queue max-size-buffers=0 max-size-time=0 max-size-bytes=0 min-threshold-time=300000000000 ! autovideosink

 gst-launch-1.0 -v rtpbin name=b rtp-profile=avpf videotestsrc is-live=true pattern=ball ! x264enc ! rtph264pay ! rtprtxqueue ! b.send_rtp_sink_0 b.send_rtp_src_0 ! udpsink host="127.0.0.1" port=5000 udpsrc port=5001 ! b.recv_rtcp_sink_0 b.send_rtcp_src_0 ! udpsink host="127.0.0.1" port=5002 sync=false async=false


 gst-launch-1.0 -v rtpbin name=b rtp-profile=avpf do-retransmission=true udpsrc port=5000 caps="application/x-rtp, media=(string)video, clock-rate=(int)90000, encoding-name=(string)H264, payload=(int)96" ! b.recv_rtp_sink_0 b. ! rtph264depay ! decodebin ! videoconvert ! autovideosink udpsrc port=5002 ! b.recv_rtcp_sink_0 b.send_rtcp_src_0 ! udpsink host="127.0.0.1" port=5001 sync=false async=false  

 RIST Send and Receive
gst-launch-1.0 filesrc location=B:/python/sample_files_custom/Custom_1.mp4 ! qtdemux ! h264parse config-interval=-1 ! mpegtsmux ! rtpmp2tpay ! ristsink address=127.0.0.1 port=5004
   gst-launch-1.0 ristsrc address=0.0.0.0 port=5004 ! rtpmp2tdepay ! decodebin ! videoconvert ! autovideosink